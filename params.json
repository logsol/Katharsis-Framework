{"name":"Katharsis Framework","tagline":"Katharsis Framework is a lightweight open-source MVC-framework for PHP5. ","body":"1. Download and Unpack \r\n----------------------\r\n\r\n[Download][] the latest version of Katharsis Framework and unpack it to\r\nyour local php workspace. (XAMPP default folder: *htdocs*)\r\n\r\n2. Project Structure \r\n--------------------\r\n\r\n![Projectstructure Screenshot][]\r\n\r\nWhen you open the project directory you will see a project structure as\r\nper margin.\r\n\r\n### application\r\n\r\nIn this directory you see three subdirectories: *controller*, *model*\r\nand *view* - these are the three parts of the [MVC-Design-Pattern][].\r\n\r\n  [Download]: /web/20120120165340/http://katharsis-framework.de/download\r\n  [Projectstructure Screenshot]: /web/20120120165340im_/http://katharsis-framework.de/img/howto/projectstructure.png\r\n  [MVC-Design-Pattern]: /web/20120120165340/http://en.wikipedia.org/wiki/Model_View_Controller\r\n\r\n### controller\r\n\r\nWith specifying several Controllers you arrange the different parts of\r\nyour application into groups of methods, for example *access*,\r\n*administration*, *index*. These Controller classes contain several\r\nmethods called *Actions*.\r\n\r\n### model\r\n\r\nModels are classes that cummunicate with any external data provider, for\r\nexample a *mysql database*, a *xml-file* or a *webservice*. Models also\r\nprocess business logic.\r\n\r\n### view\r\n\r\nThe view *.phtml* files are templates that determine what your different\r\nGUI pages contain and how they look like.\r\n\r\n### config\r\n\r\nAny configuration files for example the *database.config.ini*, that\r\ndefines mysql database connection details.\r\n\r\n### library\r\n\r\nStore any external PHP classes and libraries, that you want to use in\r\nthis directory. \\\r\n For example any additional parser classes, a template engine like\r\n*Smarty*, or even the whole *Zend* library.\r\n\r\nIt contains the Katharsis library by default.\r\n\r\n### public\r\n\r\nHere you deposit all files that have to be called via web directly, like\r\n*images*, *stylesheets*, *javascripts* and so on.\r\n\r\nIf possible, this should be the only public directory. That means that\r\nyour apache root directory of your domain or subdomain should point to\r\nthis folder.\r\n\r\nAlso you can see a *.htaccess* file as well as *index.php*. You will\r\nread about them in the chapter [How It Works][].\r\n\r\n3. Get Started\r\n--------------\r\n\r\n### Controllers And Actions\r\n\r\nIn Katharsis projects the url are designed by the following scheme:\r\n\r\n  [How It Works]: /web/20120120165340/http://katharsis-framework.de/howto#How_It_Works\r\n\r\n``` {.code}\r\nhttp://localhost/KatharsisExample/public/index/index\r\n```\r\n\r\nThis will effect, that the indexAction in the IndexController is going\r\nto be called.\r\n\r\n### Writing Controllers and Templates\r\n\r\nIf you open up the *IndexController.php* file you will see, that there\r\nis already a pretty basic example of a controller class. Take a look at\r\nthe following lines:\r\n\r\n``` {.code}\r\npublic function indexAction()\r\n{\r\n    $this->_view->someVariableName = 'Katharsis';\r\n\r\n    echo $this->_view->render('welcome');\r\n}\r\n```\r\n\r\nBy assigning values to variables in the view, you can make dynamic data\r\naccessible in your templates, like in this example. The string\r\n*'Katharsis'* is being assigned to the view variable *someVariableName*.\r\nThe render method renders your whished template and returns the result.\r\nDon't forget to *echo* it ;)\r\n\r\nNow you are able to access *someVariableName* in your template file. In\r\nthis case *welcome.phtml*\r\n\r\n``` {.code}\r\n<p>\r\n    This is an empty <?=$this->someVariableName?> project.\r\n</p>\r\n```\r\n\r\n4. How It Works \r\n---------------\r\n\r\n![Flow process chart][]\r\n\r\n### .htaccess\r\n\r\nThe processing of every Katharsis project begins with the *.htaccess*\r\nfile in the public folder. It makes shure, that every HTTP request will\r\nbe rewritten to the public *index.php* file unless it is directed to a\r\nfile that is actually existing in the public folder like images, script\r\nand style files.\r\n\r\n### Public index.php\r\n\r\nThis is the beginning of the actual PHP processing of a Katharsis\r\nproject. It initialises everything the framework needs, registers\r\nplugins and runs the bootstrap process.\r\n\r\n### Bootstrap\r\n\r\nThe heart of Katharsis. It processes the plugin interface and the\r\ncontroller routing.\r\n\r\n  [Flow process chart]: /web/20120120165340im_/http://katharsis-framework.de/img/howto/howitworks.jpg\r\n\r\n5. Mysql Database Connector \r\n---------------------------\r\n\r\n### Setting up database.config.ini\r\n\r\nFirst thing to do if you want to use the Katharsis Mysql interface is to\r\ntype in your database connections into the *config/database.config.ini*\r\nfile. You will find a sample connection in there, that is commented out\r\nby semicolons.\r\n\r\n``` {.code}\r\n[connection:development:default]\r\nhost = localhost\r\nuser = root\r\npassword = \r\ndatabase = myDatabaseName\r\n```\r\n\r\nIt is possible to use multiple database connections as well. Just apply\r\nto the following scheme of ini section name:\r\n\r\n``` {.code}\r\n[connection:NameOfYourConnection]\r\n```\r\n\r\nIf you want, you can add *:default* to your main connection.\r\n\r\n### Connecting\r\n\r\nKatharsis automatically connects to all connections that are typed into\r\nthe config file.\r\n\r\nIn all *controllers* and *model classes* you can access the default\r\nconnection by using this:\r\n\r\n``` {.code}\r\n$this->_con\r\n```\r\n\r\nOtherwise you will have to connect like this:\r\n\r\n``` {.code}\r\n$con = Katharsis_DatabaseConnector::getConnection('NameOfYourConnection');\r\n```\r\n\r\nIf you call *getConnection()* without a parameter, the default\r\nconnection will be choosen.\r\n\r\n### Executing a Statement\r\n\r\nThe most common way to execute a SQL statement:\r\n\r\n``` {.code}\r\n$sql = \"SELECT id, name FROM table WHERE group = :mygroup AND category = :c\";\r\n\r\n$values = array(\"mygroup\" => 6, \"category\" => 'stuff');\r\n$sql = $this->_con->createStatement($sql, $values);\r\n\r\n$result = $this->_con->fetchAll($sql);\r\n```\r\n\r\n### Important Database Methods\r\n\r\n Method                           Description\r\n  -------------------------------- --------------------------------------------------\r\n  createStatement($sql, $values)   Builds a clean SQL string\r\n  fetchAll(\\$sql)                  Returns a multidimensional array result\r\n  fetchOne(\\$sql)                  Returns one result row as a onedimensional array\r\n  fetchField(\\$sql)                Returns the value of one field\r\n  insert($table, $values)          Inserts one row into a table\r\n  count(\\$sql)                     Counts result rows\r\n  analyseLast()                    Prints out detailled information about the last statement\r\n  lastInsertId()                   Returns the value of one field\r\n\r\n6. Plugin Interface\r\n-------------------\r\n\r\nWith plugins it is possible to call methods before and/or after the\r\ncontroller is processed.\r\n\r\n### Write a Plugin\r\n\r\n``` {.code}\r\nclass MyPlugin extends Katharsis_Controller_Plugin_Abstract\r\n{\r\n    public function preController()\r\n    {\r\n        // some actions\r\n    }\r\n    \r\n    public function postController()\r\n    {\r\n        // some actions\r\n    }\r\n}\r\n```\r\n\r\nTake a look at the example above. Notice that your plugin has to extend\r\nthe *Katharsis\\_Controller\\_Plugin\\_Abstract* class. You just need to\r\noverwrite the method *preController* and/or *postController* to get\r\ngoing.\r\n\r\n### Register Plugins\r\n\r\nIt is important to register all plugins that you want to be called. Open\r\nthe *public/index.php* file and place your plugin registrations in there\r\nlike this:\r\n\r\n``` {.code}\r\nchdir('..');\r\nrequire_once('library/Katharsis/Bootstrap.php');\r\nKatharsis_Autoload::init();\r\n\r\nKatharsis_Controller_Plugin::registerPlugin(new MyAccessPlugin());\r\nKatharsis_Controller_Plugin::registerPlugin(new MyRenderPlugin());\r\n\r\ntry {\r\n    Katharsis_Bootstrap::run();\r\n} catch(Exception $e)\r\n{\r\n    echo '<h2>Exception thrown</h2>';\r\n    echo '<h3>' . $e->getMessage() . '</h3>';\r\n    echo '<pre>';\r\n    print_r($e);\r\n}\r\n```\r\n\r\nYour plugins will be called in the same order as you register them:\r\n\r\n1.  MyAccessPlugin -\\> preController\r\n2.  MyRenderPlugin -\\> preController\r\n3.  Controller -\\> Action\r\n4.  MyAccessPlugin -\\> postController\r\n5.  MyRenderPlugin -\\> postController\r\n\r\nTake a look at the diagram in the chapter [How It Works][] for a better\r\nunderstanding.\r\n\r\n  [How It Works]: /web/20120120165340/http://katharsis-framework.de/howto#How_It_Works\r\n\r\n### Request Manipulation\r\n\r\nIt is a usual method to manipulate the controller or action that is\r\ngoing to be called by using the *preController* plugin hook. You can use\r\nthis for building an access control.\r\n\r\n``` {.code}\r\nclass MyAccessPlugin extends Katharsis_Controller_Plugin_Abstract\r\n{\r\n    public function preController()\r\n    {\r\n        session_start();\r\n\r\n        if(Katharsis_Request::getControllerName() != 'access')\r\n        {\r\n            if($_SESSION['loggedIn'] != 'yes')\r\n            {\r\n                Katharsis_Request::setControllerName('access');\r\n                Katharsis_Request::setActionName('gate');\r\n            }\r\n        } \r\n    }\r\n}\r\n```","google":"UA-47116301-5","note":"Don't delete this file! It's used internally to help with page regeneration."}